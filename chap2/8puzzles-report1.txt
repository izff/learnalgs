See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 8 warnings)

Correctness:  46/49 tests passed
Memory:       10/22 tests passed
Timing:       100/125 tests passed

Aggregate score: 86.87%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.9K Jul  8 19:47 Board.java
3.0K Jul  8 19:47 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'initial' but that value is never used.  At Board.java:[line 128]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:6: The private instance (or static) variable 'n' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:128: Avoid unused local variables, such as 'initial'. [UnusedLocalVariable]
Solver.java:8: Can you replace the instance (or static) variable 'pq' with a local variable? [SingularField]
Solver.java:8: The private instance (or static) variable 'pq' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:9: Can you replace the instance (or static) variable 'pq2' with a local variable? [SingularField]
Solver.java:9: The private instance (or static) variable 'pq2' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:14: The private instance (or static) variable 'board' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:15: The private instance (or static) variable 'previous' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:16: The private instance (or static) variable 'moves' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 9 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:36:34: '?' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:37:34: '?' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:45:48: The local (or parameter) variable 'n' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:66:13: '(' is followed by whitespace. [ParenPad]
[WARN] Solver.java:18:21: '(' is preceded with whitespace. [MethodParamPad]
[WARN] Solver.java:41:14: 'while' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 6 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:8:13: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
[WARN] Solver.java:9:13: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
    - student   manhattan() = 8
    - reference manhattan() = 4
        3
         0  1  3 
         4  2  5 
         7  8  6 


  * puzzle00.txt
    - student   manhattan() = 116
    - reference manhattan() = 0
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * puzzle07.txt
    - student   manhattan() = 11
    - reference manhattan() = 7
        3
         1  2  3 
         0  7  6 
         5  4  8 


  * puzzle17.txt
    - student   manhattan() = 14
    - reference manhattan() = 13
        3
         5  1  8 
         2  7  3 
         4  0  6 


  * puzzle27.txt
    - student   manhattan() = 22
    - reference manhattan() = 17
        3
         5  8  7 
         1  4  6 
         3  0  2 


  * puzzle2x2-unsolvable1.txt
    - student   manhattan() = 6
    - reference manhattan() = 3
        2
         1  0 
         2  3 


==> FAILED

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
    - student   manhattan() = 4
    - reference manhattan() = 3
        2
         1  3 
         0  2 


    - failed on trial 1 of 1000

  * 3-by-3
    - student   manhattan() = 18
    - reference manhattan() = 15
        3
         6  0  5 
         4  2  1 
         3  7  8 


    - failed on trial 2 of 1000

  * 4-by-4
    - student   manhattan() = 36
    - reference manhattan() = 26
        4
         3 13 11  4 
        12  6  2  8 
         9 14 10 15 
         5  1  7  0 


    - failed on trial 1 of 1000

  * 5-by-5
    - student   manhattan() = 91
    - reference manhattan() = 76
        5
        11 13 19 12  7 
         9  1  6 17  8 
        24 21  5 14 22 
        20 10 18  3  4 
        16 15  2 23  0 


    - failed on trial 1 of 1000

  * 9-by-9
    - student   manhattan() = 480
    - reference manhattan() = 466
        9
         7 77 10 18 46 19 43 11 72 
        21 80 24  5 64  8 30 27 20 
        39 22 36 48 51 65 31 78 79 
         9 60 13 44 12  0 69 45 29 
        40 32 55 70  6 50 15 63 56 
        68 58 35 34 57 52 66 23 67 
        17  1  3 25 76 53 74 33  4 
        14 26 61  2 62 38 75 37 49 
        28 73 16 41 59 54 71 47 42 


    - failed on trial 1 of 1000

  * 10-by-10
    - student   manhattan() = 651
    - reference manhattan() = 659
        10
        65 74 51 91 60 69  4 13 93 78 
        94 80 68 43 70 31 63 37 27 62 
         9 10 49 86 95  6 87  8 11 29 
        18 53 88 20 82 72 28 19 67 98 
        22 92 24 34 83 14 79 75 38 96 
        59 25 23 56 47 26 54 89  0 39 
         7 52 81 97 50  5 76 58 99 45 
        57 32 33 90 66 30 15 12 77 16 
        40 61 71  3  2 36 44 64 21 17 
        48 42 85 46 73 41  1 84 55 35 


    - failed on trial 1 of 1000

  * 127-by-127
    - student   manhattan() = 1374360
    - reference manhattan() = 1374231

    - failed on trial 1 of 10

==> FAILED

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
    - student   manhattan() = 22
    - reference manhattan() = 17
        3
         5  8  7 
         1  4  6 
         3  0  2 


  * 1st neighbor of puzzle27.txt
    - student   manhattan() = 20
    - reference manhattan() = 18
        3
         5  8  7 
         1  0  6 
         3  4  2 


  * 2nd neighbor of puzzle27.txt
    - student   manhattan() = 22
    - reference manhattan() = 17
        3
         5  8  7 
         1  4  6 
         3  0  2 


  * 13th neighbor of puzzle27.txt
    - student   manhattan() = 19
    - reference manhattan() = 18
        3
         5  8  7 
         2  0  4 
         1  3  6 


  * 13th neighbor of puzzle00.txt
    - student   manhattan() = 114
    - reference manhattan() = 9
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 89 79 
        81 82 83 84 85  0 87 88 99 80 
        91 92 93 94 95 86 96 97 98 90 


  * 13th neighbor of puzzle2x2-unsolvable1.txt
    - student   manhattan() = 5
    - reference manhattan() = 4
        2
         0  3 
         1  2 


==> FAILED


Total: 21/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           136                  128
=> passed     3           200                  192
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    37          6864                 6856
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
==> passed

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> FAILED  puzzle10.txt      10    24152   (2.9x)
=> FAILED  puzzle15.txt      15    30400   (3.1x)
=> FAILED  puzzle20.txt      20   215776  (42.8x)
=> FAILED  puzzle25.txt      25  1551496 (249.0x)
=> FAILED  puzzle30.txt      30  6467736 (871.7x)
=> FAILED  puzzle35.txt      35  92887672 (9e+03x)
==> 0/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> FAILED  puzzle10.txt      48304   (1.2x)      34               33         
=> FAILED  puzzle15.txt      60800   (1.2x)      52               51         
=> FAILED  puzzle20.txt     431552   (1.2x)     587              586         
=> FAILED  puzzle25.txt    3102992   (1.2x)    4214             4213         
=> FAILED  puzzle30.txt   12935440   (1.2x)   17038            17037         
=> FAILED  puzzle35.txt  185776352   (1.2x)  271122           271121         
==> 0/6 tests passed


Total: 0/12 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.02 
=> passed  puzzle22.txt      22    3     0.01 
=> passed  puzzle21.txt      21    3     0.01 
=> passed  puzzle23.txt      23    3     0.01 
=> passed  puzzle24.txt      24    3     0.01 
=> passed  puzzle25.txt      25    3     0.02 
=> passed  puzzle27.txt      27    3     0.02 
=> passed  puzzle29.txt      29    3     0.01 
=> passed  puzzle26.txt      26    3     0.01 
=> passed  puzzle28.txt      28    3     0.03 
=> passed  puzzle30.txt      30    3     0.05 
=> passed  puzzle31.txt      31    3     0.05 
=> passed  puzzle39.txt      39    4     0.08 
=> passed  puzzle41.txt      41    5     0.15 
=> passed  puzzle34.txt      34    4     0.17 
=> passed  puzzle37.txt      37    4     0.17 
=> passed  puzzle44.txt      44    5     0.22 
=> passed  puzzle32.txt      32    4     0.32 
=> passed  puzzle35.txt      35    4     0.35 
=> passed  puzzle33.txt      33    4     0.70 
=> passed  puzzle43.txt      43    4     0.74 
=> passed  puzzle46.txt      46    4     0.65 
=> passed  puzzle40.txt      40    4     0.75 
=> passed  puzzle36.txt      36    4     1.46 
=> passed  puzzle45.txt      45    4     1.53 
==> 25/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> passed  puzzle20.txt       1439              853         
=> passed  puzzle22.txt       3481             2071         
=> passed  puzzle21.txt       3541             2081         
=> passed  puzzle23.txt       5299             3149         
=> passed  puzzle24.txt       5427             3259         
=> passed  puzzle25.txt      10316             6103         
=> passed  puzzle27.txt      11209             6741         
=> passed  puzzle29.txt      11637             7077         
=> passed  puzzle26.txt      11894             7099         
=> passed  puzzle28.txt      26974            16231         
=> passed  puzzle30.txt      43094            26057         
=> passed  puzzle31.txt      46007            27805         
=> passed  puzzle39.txt      71417            35045         
=> passed  puzzle41.txt     116491            50009         
=> passed  puzzle34.txt     151673            73159         
=> passed  puzzle37.txt     166811            80085         
=> passed  puzzle44.txt     275661           123165         
=> passed  puzzle32.txt     521596           249495         
=> passed  puzzle35.txt     528418           257297         
=> passed  puzzle33.txt     622352           298883         
=> passed  puzzle43.txt    1056805           508833         
=> passed  puzzle46.txt    1032320           516741         
=> passed  puzzle40.txt    1108443           541467         
=> passed  puzzle36.txt    2086331          1011485         
=> passed  puzzle45.txt    2418079          1189753         
==> 25/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt            0            0            0         
=> passed  puzzle22.txt            0            0            0         
=> passed  puzzle21.txt            0            0            0         
=> passed  puzzle23.txt            0            0            0         
=> passed  puzzle24.txt            0            0            0         
=> passed  puzzle25.txt            0            0            0         
=> passed  puzzle27.txt            0            0            0         
=> passed  puzzle29.txt            0            0            0         
=> passed  puzzle26.txt            0            0            0         
=> passed  puzzle28.txt            0            0            0         
=> passed  puzzle30.txt            0            0            0         
=> passed  puzzle31.txt            0            0            0         
=> passed  puzzle39.txt            0            0            0         
=> passed  puzzle41.txt            0            0            0         
=> passed  puzzle34.txt            0            0            0         
=> passed  puzzle37.txt            0            0            0         
=> passed  puzzle44.txt            0            0            0         
=> passed  puzzle32.txt            0            0            0         
=> passed  puzzle35.txt            0            0            0         
=> passed  puzzle33.txt            0            0            0         
=> passed  puzzle43.txt            0            0            0         
=> passed  puzzle46.txt            0            0            0         
=> passed  puzzle40.txt            0            0            0         
=> passed  puzzle36.txt            0            0            0         
=> passed  puzzle45.txt            0            0            0         
==> 25/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       2289                2279               19585         
=> passed  puzzle22.txt       5549                5543               55207         
=> passed  puzzle21.txt       5619                5611               56743         
=> passed  puzzle23.txt       8445                8437               84879         
=> passed  puzzle24.txt       8683                8673               90311         
=> passed  puzzle25.txt      16416               16408              178367         
=> passed  puzzle27.txt      17947               17939              196715         
=> passed  puzzle29.txt      18711               18703              215625         
=> passed  puzzle26.txt      18990               18984              216387         
=> passed  puzzle28.txt      43202               43192              556043         
=> passed  puzzle30.txt      69148               69142              918593         
=> passed  puzzle31.txt      73809               73801              973611         
=> passed  puzzle39.txt     106459              106451             1330439         
=> passed  puzzle41.txt     166497              166487             2267077         
=> passed  puzzle34.txt     224829              224823             3230843         
=> passed  puzzle37.txt     246893              246885             3510677         
=> passed  puzzle44.txt     398823              398813             5790133         
=> passed  puzzle32.txt     771088              771078            12703011         
=> passed  puzzle35.txt     785712              785702            12448939         
=> passed  puzzle33.txt     921232              921224            15272625         
=> passed  puzzle43.txt    1565635             1565627            25775621         
=> passed  puzzle46.txt    1549058             1549050            25679211         
=> passed  puzzle40.txt    1649907             1649901            27742339         
=> passed  puzzle36.txt    3097813             3097803            56218035         
=> passed  puzzle45.txt    3607829             3607821            63336305         
==> 25/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt       2289                2279               19585   (4.9x)
=> FAILED  puzzle22.txt       5549                5543               55207   (5.7x)
=> FAILED  puzzle21.txt       5619                5611               56743   (5.8x)
=> FAILED  puzzle23.txt       8445                8437               84879   (5.7x)
=> FAILED  puzzle24.txt       8683                8673               90311   (5.9x)
=> FAILED  puzzle25.txt      16416               16408              178367   (6.2x)
=> FAILED  puzzle27.txt      17947               17939              196715   (6.3x)
=> FAILED  puzzle29.txt      18711               18703              215625   (6.6x)
=> FAILED  puzzle26.txt      18990               18984              216387   (6.5x)
=> FAILED  puzzle28.txt      43202               43192              556043   (7.4x)
=> FAILED  puzzle30.txt      69148               69142              918593   (7.6x)
=> FAILED  puzzle31.txt      73809               73801              973611   (7.5x)
=> FAILED  puzzle39.txt     106459              106451             1330439   (7.1x)
=> FAILED  puzzle41.txt     166497              166487             2267077   (7.8x)
=> FAILED  puzzle34.txt     224829              224823             3230843   (8.2x)
=> FAILED  puzzle37.txt     246893              246885             3510677   (8.1x)
=> FAILED  puzzle44.txt     398823              398813             5790133   (8.3x)
=> FAILED  puzzle32.txt     771088              771078            12703011   (9.4x)
=> FAILED  puzzle35.txt     785712              785702            12448939   (9.1x)
=> FAILED  puzzle33.txt     921232              921224            15272625   (9.5x)
=> FAILED  puzzle43.txt    1565635             1565627            25775621   (9.4x)
=> FAILED  puzzle46.txt    1549058             1549050            25679211   (9.5x)
=> FAILED  puzzle40.txt    1649907             1649901            27742339   (9.6x)
=> FAILED  puzzle36.txt    3097813             3097803            56218035  (10.4x)
=> FAILED  puzzle45.txt    3607829             3607821            63336305  (10.0x)
==> 0/25 tests passed


Total: 100/125 tests passed!


================================================================




